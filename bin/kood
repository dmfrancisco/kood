#!/usr/bin/env ruby
require "thor"
require "kood"

class K < Thor
  namespace :kood

  # If no arguments are specified, the command displays all existing boards.
  # If the <board-slug> argument is passed, a new board will be created.
  desc "board [OPTIONS] [<BOARD-SLUG>]", "Display and manage boards"
  #
  # Delete a board. If <board-slug> is present, the specified board will be deleted.
  # With no arguments, the currently checked out board will be deleted.
  method_option :delete, :aliases => "-d", :type => :boolean,
    :default => Kood::Core.current_board
  #
  # Clone a board. <board-slug> will be cloned to <new-board-slug>.
  # <board-slug> is kept intact and a new one is created with the exact same data.
  method_option :clone, :aliases => "-c", :type => :string
  def board(board_slug = nil)
  end

  desc "checkout <BOARD-SLUG>", "Checkout a different board"
  def checkout(board_slug)
  end

  desc "status", "Show the status of the currently checked out board"
  #
  # Show status information of the checked out board associated with the given user.
  method_option :assigned, :aliases => "-a", :type => :string
  def status
    error "Nothing associated to that user" unless Kood::Core.is_member(options.assigned)
  end

  # Invoked with `kood --help`, `kood help`, `kood help <cmd>` and `kood --help <cmd>`
  def help(cli = nil)
    case cli
      when nil then command = "kood"
      else command = "kood-#{cli}"
    end

    manpages = %w(
      kood-board
      kood-checkout
      kood-status)

    if manpages.include? command # Present a man page for the command
      root = File.expand_path("../../man", __FILE__)
      Kernel.exec "man #{ root }/#{ command }.1"
    else
      super # Use thor to output help
    end
  end

  desc "version", "Print kood's version information"
  map ["--version", "-v"] => :version
  def version
    puts "kood version #{ Kood::VERSION }"
  end
end

K.start
